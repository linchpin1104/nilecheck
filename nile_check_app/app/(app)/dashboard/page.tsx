"use client";

import { useEffect, useState, useMemo, useCallback } from "react";
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
import { Utensils, BedDouble, Info, ListPlus, TrendingUp, TrendingDown, Minus, Lightbulb, RefreshCw } from "lucide-react";
import Link from "next/link";
import { Button } from "@/components/ui/button";
import { subWeeks } from "date-fns";
import { useAppStore } from "@/lib/store";
import useAuth from "@/hooks/useAuth";
import { 
  PieChart, Pie, Cell, BarChart, Bar, XAxis, YAxis, Tooltip, 
  ResponsiveContainer, Legend
} from 'recharts';
import { usePathname } from "next/navigation";

export default function DashboardPage() {
  const { 
    meals, 
    sleep, 
    checkins, 
    isInitialized, 
    isLoading, 
    getTodaySummary,
    generateSampleData,
    syncData,
    suggestions,
    setSuggestions
  } = useAppStore();
  
  const { getUserId, refreshSession } = useAuth();
  const [isRefreshing, setIsRefreshing] = useState(false);
  
  const [summary, setSummary] = useState({
    todaySleepHours: 0,
    todayMealsLogged: 0,
    todayActivitiesLogged: 0,
  });

  const [sleepStats, setSleepStats] = useState({
    averageSleepHours: 0,
    lastWeekAverage: 0,
    percentChange: 0,
  });

  const [topActivities, setTopActivities] = useState<Array<{name: string, value: number}>>([]);
  const [topEmotions, setTopEmotions] = useState<Array<{name: string, value: number, emoji?: string}>>([]);
  const [topPartners, setTopPartners] = useState<Array<{name: string, value: number}>>([]);
  const [personalizedSuggestions, setPersonalizedSuggestions] = useState<string[]>([]);
  const [isGeneratingSuggestions, setIsGeneratingSuggestions] = useState(false);
  const [suggestionsGenerated, setSuggestionsGenerated] = useState(false);

  const [showWelcomePopup, setShowWelcomePopup] = useState(false);

  const pathname = usePathname();

  // Memoized flags for data existence checks
  const hasData = useMemo(() => 
    isInitialized && (meals.length > 0 || sleep.length > 0 || checkins.length > 0),
  [isInitialized, meals.length, sleep.length, checkins.length]);
  
  // Process data for charts - memoized calculation of sleep statistics
  const calculateSleepStats = useCallback(() => {
    if (!hasData) return null;
    
    const today = new Date();
    const lastWeekStart = subWeeks(today, 1);
    
    // Current week sleep data
    const thisWeekSleep = sleep.filter(entry => {
      const entryDate = new Date(entry.date);
      return entryDate >= lastWeekStart && entryDate <= today;
    });
    
    // Last week sleep data
    const twoWeeksAgo = subWeeks(today, 2);
    const lastWeekSleep = sleep.filter(entry => {
      const entryDate = new Date(entry.date);
      return entryDate >= twoWeeksAgo && entryDate < lastWeekStart;
    });
    
    // Calculate averages
    const currentAvg = thisWeekSleep.length > 0 
      ? thisWeekSleep.reduce((sum, entry) => {
          const hours = (new Date(entry.endTime).getTime() - new Date(entry.startTime).getTime()) / (1000 * 60 * 60);
          return sum + hours;
        }, 0) / thisWeekSleep.length
      : 0;
      
    const lastAvg = lastWeekSleep.length > 0
      ? lastWeekSleep.reduce((sum, entry) => {
          const hours = (new Date(entry.endTime).getTime() - new Date(entry.startTime).getTime()) / (1000 * 60 * 60);
          return sum + hours;
        }, 0) / lastWeekSleep.length
      : 0;
      
    const percentChange = lastAvg > 0 
      ? ((currentAvg - lastAvg) / lastAvg) * 100 
      : 0;
      
    return {
      averageSleepHours: currentAvg,
      lastWeekAverage: lastAvg,
      percentChange
    };
  }, [hasData, sleep]);
  
  // Memoized calculation of activity data
  const processActivityData = useCallback(() => {
    if (!hasData) return [];
    
    const activityCounts: Record<string, number> = {};
    checkins.forEach(checkin => {
      checkin.input.todayActivities.forEach(activity => {
        activityCounts[activity] = (activityCounts[activity] || 0) + 1;
      });
    });
    
    const activityNames: Record<string, string> = {
      exercise: "Ïö¥Îèô",
      relaxation: "Ìú¥Ïãù",
      hobbies: "Ï∑®ÎØ∏",
      socializing: "ÏÇ¨Íµê ÌôúÎèô",
      householdChores: "ÏßëÏïàÏùº",
      workStudy: "ÏóÖÎ¨¥/ÌïôÏóÖ",
      selfCare: "ÏûêÍ∏∞ Í¥ÄÎ¶¨",
      outdoors: "ÏïºÏô∏ ÌôúÎèô",
      errands: "Ïö©Î¨¥"
    };
    
    return Object.entries(activityCounts)
      .map(([name, value]) => ({ 
        name: activityNames[name as keyof typeof activityNames] || name, 
        value 
      }))
      .sort((a, b) => b.value - a.value);
  }, [hasData, checkins]);
  
  // Memoized calculation of emotion data
  const processEmotionData = useCallback(() => {
    if (!hasData) return [];
    
    const emotionCounts: Record<string, number> = {};
    checkins.forEach(checkin => {
      checkin.input.mainEmotions.forEach(emotion => {
        emotionCounts[emotion] = (emotionCounts[emotion] || 0) + 1;
      });
    });
    
    const emotionNames: Record<string, string> = {
      joy: "Í∏∞ÏÅ®",
      sadness: "Ïä¨Ìîî",
      anger: "Î∂ÑÎÖ∏",
      anxiety: "Î∂àÏïà",
      calmness: "ÌèâÏò®",
      gratitude: "Í∞êÏÇ¨",
      stress: "Ïä§Ìä∏Î†àÏä§",
      hope: "Ìù¨Îßù"
    };
    
    return Object.entries(emotionCounts)
      .map(([name, value]) => ({ 
        name: emotionNames[name as keyof typeof emotionNames] || name, 
        value,
        emoji: getEmotionEmoji(name)
      }))
      .sort((a, b) => b.value - a.value)
      .slice(0, 5); // Get top 5 emotions
  }, [hasData, checkins]);
  
  // Memoized calculation of partner data
  const processPartnerData = useCallback(() => {
    if (!hasData) return [];
    
    const partnerCounts: Record<string, number> = {};
    checkins.forEach(checkin => {
      if (checkin.input.conversationPartner && checkin.input.conversationPartner !== "ÏóÜÏùå") {
        partnerCounts[checkin.input.conversationPartner] = (partnerCounts[checkin.input.conversationPartner] || 0) + 1;
      }
    });
    
    return Object.entries(partnerCounts)
      .map(([name, value]) => ({ name, value }))
      .sort((a, b) => b.value - a.value)
      .slice(0, 3); // Get top 3 partners
  }, [hasData, checkins]);

  // Update all stats when data changes
  useEffect(() => {
    if (hasData) {
      // Calculate sleep statistics
      const stats = calculateSleepStats();
      if (stats) {
        setSleepStats(stats);
      }
      
      // Process activity data for donut chart
      setTopActivities(processActivityData());
      
      // Process emotion data for bar chart  
      setTopEmotions(processEmotionData());
      
      // Process conversation partner data
      setTopPartners(processPartnerData());
    }
  }, [hasData, calculateSleepStats, processActivityData, processEmotionData, processPartnerData]);

  useEffect(() => {
    // Ï≤´ Î°úÎìú Ïãú Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏúºÎ©¥ Ïõ∞Ïª¥ ÌåùÏóÖ ÌëúÏãú
    if (isInitialized && meals.length === 0 && sleep.length === 0 && checkins.length === 0) {
      // Îçî Ïù¥ÏÉÅ ÏÉòÌîå Îç∞Ïù¥ÌÑ∞Î•º ÏûêÎèô ÏÉùÏÑ±ÌïòÏßÄ ÏïäÏùå
      // generateSampleData();
      
      // ÎåÄÏã† ÏÉà ÏÇ¨Ïö©ÏûêÏóêÍ≤å Ïõ∞Ïª¥ ÌåùÏóÖ ÌëúÏãú
      setShowWelcomePopup(true);
    }
    
    // Ïò§ÎäòÏùò ÏöîÏïΩ Îç∞Ïù¥ÌÑ∞ ÏóÖÎç∞Ïù¥Ìä∏
    if (isInitialized) {
      setSummary(getTodaySummary());
    }
  }, [isInitialized, meals.length, sleep.length, checkins.length, getTodaySummary]);
  
  const getEmotionEmoji = (emotion: string): string => {
    const emojiMap: Record<string, string> = {
      joy: "üòä",
      sadness: "üò¢",
      anger: "üò†",
      anxiety: "üòü",
      calmness: "üòå",
      gratitude: "üôè",
      stress: "üò´",
      hope: "‚ú®",
      other: "‚úçÔ∏è"
    };
    return emojiMap[emotion] || "üòê";
  };

  // Color arrays for charts - memoized to prevent recreating on each render
  const ACTIVITY_COLORS = useMemo(() => 
    ['#8884d8', '#83a6ed', '#8dd1e1', '#82ca9d', '#a4de6c', '#d0ed57', '#ffc658'], 
  []);
  
  const EMOTION_COLORS = useMemo(() => 
    ['#FF6B6B', '#4ECDC4', '#FFE66D', '#1A535C', '#FF9F1C'], 
  []);
  
  const PARTNER_COLORS = useMemo(() => 
    ['#6C63FF', '#5E72EB', '#FF7F50'], 
  []);
  
  // Handle generating personalized suggestions - optimized with request debouncing
  const handleGenerateSuggestions = useCallback(async () => {
    if (suggestionsGenerated || suggestions.length > 0 || isGeneratingSuggestions) return;
    
    setIsGeneratingSuggestions(true);
    
    // Îç∞Ïù¥ÌÑ∞Í∞Ä 5Í∞ú ÎØ∏ÎßåÏù¥Î©¥ ÏïàÎÇ¥ Î©îÏãúÏßÄ Í≥†Ï†ï
    const totalDataCount = meals.length + sleep.length + checkins.length;
    if (totalDataCount < 5) {
      const msg = ["Îç∞Ïù¥ÌÑ∞Í∞Ä Ï∂©Î∂ÑÌïòÏßÄ ÏïäÏïÑ ÏÉùÏÑ±Ïù¥ Ïñ¥Î†§ÏõåÏöî."];
      setPersonalizedSuggestions(msg);
      setSuggestions(msg); // zustand storeÏóêÎèÑ Ï†ÄÏû•Ìï¥ Í≥†Ï†ïÏãúÌÇ¥
      setSuggestionsGenerated(true);
      setIsGeneratingSuggestions(false);
      return;
    }
    
    try {
      // ÏÇ¨Ïö©Ïûê ID ÏùºÍ¥ÄÏÑ± ÏûàÍ≤å Í∞ÄÏ†∏Ïò§Í∏∞
      const userId = getUserId() || 'user_default';
      
      const response = await fetch('/api/suggestions', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ uid: userId }),
      });
      const data = await response.json();
      setPersonalizedSuggestions(data.suggestions);
      setSuggestions(data.suggestions); // zustand storeÏóêÎèÑ Ï†ÄÏû•Ìï¥ Í≥†Ï†ïÏãúÌÇ¥
      setSuggestionsGenerated(true);
    } catch (err) {
      console.error('Ï†úÏïà ÏÉùÏÑ± Ï§ë Ïò§Î•ò Î∞úÏÉù:', err);
      const fallback = [
        "Í∑úÏπôÏ†ÅÏù∏ ÏãùÏÇ¨ÏôÄ Ï∂©Î∂ÑÌïú ÏàòÎ∂Ñ ÏÑ≠Ï∑®Îäî ÏóêÎÑàÏßÄ ÏàòÏ§ÄÏùÑ ÏùºÏ†ïÌïòÍ≤å Ïú†ÏßÄÌïòÎäî Îç∞ ÎèÑÏõÄÏù¥ Îê©ÎãàÎã§. ÌïòÎ£® 8ÏûîÏùò Î¨ºÏùÑ ÎßàÏãúÎäî Í≤ÉÏùÑ Î™©ÌëúÎ°ú Ìï¥Î≥¥ÏÑ∏Ïöî.",
        "ÌïòÎ£® 10Î∂ÑÏî© Î™ÖÏÉÅÏù¥ÎÇò ÍπäÏùÄ Ìò∏Ìù° Ïó∞ÏäµÏùÑ ÌÜµÌï¥ Ïä§Ìä∏Î†àÏä§ ÏàòÏ§ÄÏùÑ Í¥ÄÎ¶¨Ìï¥Î≥¥ÏÑ∏Ïöî. Îã®ÏàúÌïú Í∏∞Î≤ïÏù¥ÏßÄÎßå Ï†ïÏã† Í±¥Í∞ïÏóê ÌÅ∞ ÏòÅÌñ•ÏùÑ Ï§Ñ Ïàò ÏûàÏäµÎãàÎã§.",
        "Ï£º 3Ìöå, 30Î∂Ñ Ïù¥ÏÉÅÏùò Ïú†ÏÇ∞ÏÜå Ïö¥ÎèôÏùÄ Í∏∞Î∂ÑÍ≥º ÏàòÎ©¥Ïùò ÏßàÏùÑ Ìñ•ÏÉÅÏãúÌÇ§Îäî Îç∞ Ìö®Í≥ºÏ†ÅÏûÖÎãàÎã§. Í±∑Í∏∞Î∂ÄÌÑ∞ ÏãúÏûëÌï¥Î≥¥ÏÑ∏Ïöî."
      ];
      setPersonalizedSuggestions(fallback);
      setSuggestions(fallback);
      setSuggestionsGenerated(true);
    } finally {
      setIsGeneratingSuggestions(false);
    }
  }, [suggestionsGenerated, suggestions.length, meals.length, sleep.length, checkins.length, setSuggestions, isGeneratingSuggestions, getUserId]);

  // ÏÉàÎ°úÍ≥†Ïπ® Ìï®Ïàò ÏµúÏ†ÅÌôî (Ï§ëÎ≥µ ÏöîÏ≤≠ Î∞©ÏßÄ)
  const refreshData = useCallback(async () => {
    // Ïù¥ÎØ∏ Î°úÎî© Ï§ëÏù¥Î©¥ Ï§ëÎ≥µ ÏöîÏ≤≠ Î∞©ÏßÄ
    if (isRefreshing || isLoading) {
      console.log('Ïù¥ÎØ∏ Îç∞Ïù¥ÌÑ∞ ÏÉàÎ°úÍ≥†Ïπ® Ï§ë, Ï§ëÎ≥µ ÏöîÏ≤≠ Î∞©ÏßÄ');
      return;
    }
    
    try {
      setIsRefreshing(true);
      
      // Ïã†Î¢∞Ìï† Ïàò ÏûàÎäî ÏÇ¨Ïö©Ïûê ID Í∞ÄÏ†∏Ïò§Í∏∞
      const userId = getUserId() || 'user_default';
      console.log(`ÎåÄÏãúÎ≥¥Îìú - ${userId} ÏÇ¨Ïö©Ïûê Îç∞Ïù¥ÌÑ∞ ÏÉàÎ°úÍ≥†Ïπ® ÏãúÏûë`);
      
      // syncData Î©îÏÑúÎìú ÏÇ¨Ïö©Ìï¥ Îç∞Ïù¥ÌÑ∞ ÏÉàÎ°úÍ≥†Ïπ®
      await syncData(userId);
      
      // ÌÜµÍ≥Ñ Îç∞Ïù¥ÌÑ∞ ÏóÖÎç∞Ïù¥Ìä∏
      const todaySummary = getTodaySummary();
      setSummary(todaySummary);
      
      // Ï∞®Ìä∏ Îç∞Ïù¥ÌÑ∞ Îã§Ïãú Ï≤òÎ¶¨
      const stats = calculateSleepStats();
      if (stats) {
        setSleepStats(stats);
      }
      
      setTopActivities(processActivityData());
      setTopEmotions(processEmotionData());
      setTopPartners(processPartnerData());
      
      console.log('ÏÑúÎ≤ÑÏóêÏÑú Îç∞Ïù¥ÌÑ∞ ÎèôÍ∏∞Ìôî ÏÑ±Í≥µ');
      
      // ÏÉàÎ°úÍ≥†Ïπ® ÏÉÅÌÉú Ìï¥Ï†ú
      setIsRefreshing(false);
    } catch (err) {
      console.error('Îç∞Ïù¥ÌÑ∞ ÏÉàÎ°úÍ≥†Ïπ® Ï§ë Ïò§Î•ò Î∞úÏÉù:', err);
      setIsRefreshing(false);
    }
  }, [
    isRefreshing,
    isLoading,
    syncData,
    getTodaySummary,
    calculateSleepStats,
    processActivityData,
    processEmotionData,
    processPartnerData,
    getUserId
  ]);

  // ÎùºÏö∞Ìä∏ Î≥ÄÍ≤Ω Ïãú ÏûêÎèô Îç∞Ïù¥ÌÑ∞ ÎèôÍ∏∞Ìôî
  useEffect(() => {
    // Ïù¥ÎØ∏ Îç∞Ïù¥ÌÑ∞Í∞Ä ÏûàÏúºÎ©¥ Ï§ëÎ≥µ ÎèôÍ∏∞Ìôî Î∞©ÏßÄ
    if (isInitialized && hasData) {
      console.log('ÎåÄÏãúÎ≥¥Îìú - Ïù¥ÎØ∏ Îç∞Ïù¥ÌÑ∞Í∞Ä ÏûàÏñ¥ ÎèôÍ∏∞Ìôî ÏÉùÎûµ');
      return;
    }
    
    // Ïù¥ÎØ∏ ÎèôÍ∏∞Ìôî Ï§ëÏù¥Î©¥ Ï§ëÎ≥µ Ìò∏Ï∂ú Î∞©ÏßÄ
    if (isLoading || isRefreshing) {
      console.log('ÎåÄÏãúÎ≥¥Îìú - Ïù¥ÎØ∏ Îç∞Ïù¥ÌÑ∞ ÎèôÍ∏∞Ìôî Ï§ë, Ï§ëÎ≥µ ÏöîÏ≤≠ Î∞©ÏßÄ');
      return;
    }
    
    // Îç∞Ïù¥ÌÑ∞ ÎèôÍ∏∞Ìôî ÏàòÌñâ
    console.log('ÎåÄÏãúÎ≥¥Îìú ÌéòÏù¥ÏßÄ Î°úÎìú - Îç∞Ïù¥ÌÑ∞ ÎèôÍ∏∞Ìôî ÏãúÏûë');
    setIsRefreshing(true);
    
    // Ïã†Î¢∞Ìï† Ïàò ÏûàÎäî ÏÇ¨Ïö©Ïûê ID Í∞ÄÏ†∏Ïò§Í∏∞
    const userId = getUserId() || 'user_default';
    
    // syncData Ìò∏Ï∂ú
    syncData(userId)
      .then((success) => {
        console.log(`ÎåÄÏãúÎ≥¥Îìú Îç∞Ïù¥ÌÑ∞ ÎèôÍ∏∞Ìôî ${success ? 'ÏÑ±Í≥µ' : 'ÏùºÎ∂Ä Ïã§Ìå®'}`);
        setIsRefreshing(false);
      })
      .catch(err => {
        console.error('ÎåÄÏãúÎ≥¥Îìú Îç∞Ïù¥ÌÑ∞ ÎèôÍ∏∞Ìôî Ïã§Ìå®:', err);
        setIsRefreshing(false);
      });
  }, [isInitialized, hasData, pathname, isLoading, isRefreshing, syncData, getUserId]);

  // suggestionsÍ∞Ä zustand storeÏóê ÏûàÏúºÎ©¥ Ìï≠ÏÉÅ Í∑∏ Í∞íÏùÑ Î≥¥Ïó¨Ï£ºÍ≥†, ÏóÜÏùÑ ÎïåÎßå ÏÉùÏÑ± Î≤ÑÌäº ÎÖ∏Ï∂ú
  useEffect(() => {
    if (suggestions && suggestions.length > 0) {
      setPersonalizedSuggestions(suggestions);
      setSuggestionsGenerated(true);
    }
  }, [suggestions]);

  // ÌéòÏù¥ÏßÄ Î°úÎî© Ïãú ÏÑ∏ÏÖò ÏÉÅÌÉú Í∞ïÏ†ú ÌôïÏù∏ Î∞è Îç∞Ïù¥ÌÑ∞ ÎèôÍ∏∞Ìôî
  /* eslint-disable react-hooks/exhaustive-deps */
  useEffect(() => {
    const initPage = async () => {
      setIsRefreshing(true);
      console.log('[Dashboard] ÌéòÏù¥ÏßÄ Ï¥àÍ∏∞Ìôî ÏãúÏûë, ÏÑ∏ÏÖò ÌôïÏù∏ Ï§ë...');
      
      try {
        // ÏÑ∏ÏÖò Í∞ïÏ†ú Í∞±Ïã†
        await refreshSession();
        
        // Îç∞Ïù¥ÌÑ∞ ÎèôÍ∏∞Ìôî
        const userId = getUserId();
        console.log('[Dashboard] ÏÇ¨Ïö©Ïûê ID:', userId);
        
        if (userId) {
          await syncData(userId);
        }
        
        console.log('[Dashboard] ÌéòÏù¥ÏßÄ Ï¥àÍ∏∞Ìôî ÏôÑÎ£å');
      } catch (error) {
        console.error('[Dashboard] Ï¥àÍ∏∞Ìôî Ï§ë Ïò§Î•ò Î∞úÏÉù:', error);
        // Ïò§Î•òÍ∞Ä Î∞úÏÉùÌï¥ÎèÑ ÌéòÏù¥ÏßÄ Î°úÎî©ÏùÄ Í≥ÑÏÜç ÏßÑÌñâ
      } finally {
        setIsRefreshing(false);
      }
    };
    
    initPage();
    // Only run this effect once when the component mounts
  }, []);
  /* eslint-enable react-hooks/exhaustive-deps */

  if (!isInitialized || isLoading) {
    return (
      <div className="flex items-center justify-center h-full">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary"></div>
        <p className="ml-4 text-muted-foreground">ÎåÄÏãúÎ≥¥Îìú Î∂àÎü¨Ïò§Îäî Ï§ë...</p>
      </div>
    );
  }

  const hasAnyData = meals.length > 0 || sleep.length > 0 || checkins.length > 0;

  // ÏÉòÌîå Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ± Ìï®Ïàò - ÏÇ¨Ïö©ÏûêÍ∞Ä ÏßÅÏ†ë ÏÉòÌîå Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ± Î≤ÑÌäºÏùÑ ÎàåÎ†ÄÏùÑ ÎïåÎßå Ìò∏Ï∂ú
  const handleGenerateSampleData = () => {
    generateSampleData();
    setShowWelcomePopup(false);
  };

  // Ï≤´ Í∏∞Î°ù ÏÉùÏÑ± ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô
  const handleCreateFirstEntry = () => {
    setShowWelcomePopup(false);
    // '/log-activity' ÌéòÏù¥ÏßÄÎ°ú Î¶¨Îã§Ïù¥Î†âÌä∏Îäî Ïª¥Ìè¨ÎÑåÌä∏ ÎÇ¥ÏóêÏÑú Ï≤òÎ¶¨Îê®
  };

  return (
    <div className="container mx-auto pt-6 pb-12 px-4">
      {/* Ïã†Í∑ú ÏÇ¨Ïö©Ïûê ÌôòÏòÅ Î©îÏãúÏßÄ */}
      {showWelcomePopup && (
        <div className="mb-8 bg-primary/10 border border-primary/20 rounded-lg p-6 shadow-md animate-fadeIn">
          <div className="flex flex-col md:flex-row items-start md:items-center justify-between gap-4">
            <div>
              <h2 className="text-xl font-bold text-primary mb-2">ÌôòÏòÅÌï©ÎãàÎã§! üëã</h2>
              <p className="text-muted-foreground mb-4">
                ÎçîÎÇòÏùºÏ≤¥ÌÅ¨Ïóê Í∞ÄÏûÖÌï¥Ï£ºÏÖîÏÑú Í∞êÏÇ¨Ìï©ÎãàÎã§. Ï≤´ Î≤àÏß∏ ÌôúÎèôÏùÑ Í∏∞Î°ùÌïòÍ≥† Ïõ∞Îπô Îç∞Ïù¥ÌÑ∞Î•º Í¥ÄÎ¶¨Ìï¥Î≥¥ÏÑ∏Ïöî.
              </p>
            </div>
            <div className="flex flex-col sm:flex-row gap-3 w-full md:w-auto">
              <Link href="/log-activity" className="flex-1 md:flex-auto">
                <Button onClick={handleCreateFirstEntry} className="w-full">
                  <ListPlus className="mr-2 h-4 w-4" /> Ï≤´ Í∏∞Î°ù ÏÉùÏÑ±ÌïòÍ∏∞
                </Button>
              </Link>
              <Button 
                variant="outline" 
                className="flex-1 md:flex-auto" 
                onClick={handleGenerateSampleData}
              >
                <Info className="mr-2 h-4 w-4" /> ÏÉòÌîå Îç∞Ïù¥ÌÑ∞ Î≥¥Í∏∞
              </Button>
            </div>
          </div>
        </div>
      )}

      <div className="flex flex-col md:flex-row justify-between items-start md:items-center mb-8">
        <h1 className="text-3xl font-bold text-primary mb-4 md:mb-0">ÎåÄÏãúÎ≥¥Îìú</h1>
        <div className="flex gap-2">
          <Button 
            variant="outline" 
            size="sm" 
            className="flex items-center gap-1"
            onClick={refreshData}
            disabled={isRefreshing}
          >
            <RefreshCw className={`h-4 w-4 ${isRefreshing ? 'animate-spin' : ''}`} />
            {isRefreshing ? 'ÏÉàÎ°úÍ≥†Ïπ® Ï§ë...' : 'Îç∞Ïù¥ÌÑ∞ ÏÉàÎ°úÍ≥†Ïπ®'}
          </Button>
        </div>
      </div>

      {hasAnyData && (
        <>
          <Card className="mb-8 shadow-md hover:shadow-lg transition-shadow">
            <CardHeader>
              <CardTitle className="flex items-center gap-2 text-xl">
                <ListPlus className="text-primary h-5 w-5" /> ÎÇòÏùò ÌôúÎèôÍ∏∞Î°ùÏùÑ ÎÇ®Í≤®Î≥¥ÏÑ∏Ïöî
              </CardTitle>
              <CardDescription>
                Í∏∞Î°ùÏùÑ Ï∂îÍ∞ÄÌïòÍ±∞ÎÇò ÏóÖÎç∞Ïù¥Ìä∏ÌïòÍ≥† Ïõ∞Îπô Ï≤¥ÌÅ¨Ïù∏ÏùÑ Ìï† Ïàò ÏûàÏäµÎãàÎã§.
              </CardDescription>
            </CardHeader>
            <CardContent>
              <Link href="/log-activity" className="block w-full">
                <Button variant="default" className="w-full">
                  <ListPlus className="mr-2 h-4 w-4" /> ÌôúÎèô Î°úÍ∑∏ Î∞è Ï≤¥ÌÅ¨Ïù∏ÏúºÎ°ú Ïù¥Îèô
                </Button>
              </Link>
            </CardContent>
          </Card>

          <Card className="mb-8 shadow-md hover:shadow-lg transition-shadow bg-gradient-to-r from-blue-50 to-indigo-50">
            <CardHeader>
              <CardTitle className="flex items-center gap-2 text-xl">
                <Lightbulb className="text-amber-500 h-5 w-5" /> Ïù¥Î≤à Ï£º ÎßûÏ∂§Ìòï Ï†úÏïà
              </CardTitle>
              <CardDescription>
                Í∏∞Î°ùÎêú Îç∞Ïù¥ÌÑ∞Î•º Î∞îÌÉïÏúºÎ°ú Ìïú Í∞úÏù∏ÌôîÎêú Ïõ∞ÎãàÏä§ Ï†úÏïàÏûÖÎãàÎã§.
              </CardDescription>
            </CardHeader>
            <CardContent>
              {personalizedSuggestions.length === 0 ? (
                <div className="flex flex-col items-center justify-center p-6">
                  <p className="text-muted-foreground mb-4 text-center">
                    Îç∞Ïù¥ÌÑ∞Î•º Î∂ÑÏÑùÌïòÏó¨ ÎßûÏ∂§Ìòï Ïõ∞ÎãàÏä§ Ï†úÏïàÏùÑ ÏÉùÏÑ±Ìï©ÎãàÎã§.
                  </p>
                  <Button 
                    onClick={handleGenerateSuggestions}
                    disabled={isGeneratingSuggestions}
                    className="bg-amber-500 hover:bg-amber-600"
                  >
                    {isGeneratingSuggestions ? (
                      <>
                        <RefreshCw className="mr-2 h-4 w-4 animate-spin" />
                        ÏÉùÏÑ± Ï§ë...
                      </>
                    ) : (
                      <>
                        <Lightbulb className="mr-2 h-4 w-4" />
                        Ï†úÏïà ÏÉùÏÑ±ÌïòÍ∏∞
                      </>
                    )}
                  </Button>
                </div>
              ) : (
                <div className="space-y-4">
                  {personalizedSuggestions.map((suggestion, index) => (
                    <div key={index} className="flex items-start gap-3 bg-white p-3 rounded-lg shadow-sm">
                      <div className="mt-1 text-amber-500 bg-amber-50 rounded-full p-1.5 h-7 w-7 flex items-center justify-center text-xs">
                        {index + 1}
                      </div>
                      <p className="text-sm">{suggestion}</p>
                    </div>
                  ))}
                </div>
              )}
            </CardContent>
          </Card>
        </>
      )}

      {!hasAnyData && (
        <Card className="mb-8 bg-blue-50 border-blue-200 shadow-md">
          <CardHeader>
            <CardTitle className="flex items-center gap-2 text-blue-700"><Info className="h-5 w-5"/> ÎçîÎÇòÏùºÏ≤¥ÌÅ¨Ïóê Ïò§Ïã† Í≤ÉÏùÑ ÌôòÏòÅÌï©ÎãàÎã§!</CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-blue-600 mb-4">
              ÎçîÎÇòÏùºÏ≤¥ÌÅ¨Îäî Í±¥Í∞ïÌïú ÏÉùÌôú ÏäµÍ¥ÄÏùÑ Í∏∞Î°ùÌïòÍ≥† Î∂ÑÏÑùÌïòÏó¨ Ïõ∞ÎãàÏä§ Ïó¨Ï†ïÏùÑ ÏßÄÏõêÌï©ÎãàÎã§. ÏãùÏÇ¨, ÏàòÎ©¥ Î∞è Ï†ïÏÑú ÏÉÅÌÉúÎ•º Ï∂îÏ†ÅÌï† Ïàò ÏûàÏäµÎãàÎã§.
            </p>
            <div className="grid grid-cols-1 sm:grid-cols-2 gap-3">
              <Link href="/log-activity">
                <Button variant="default" className="w-full">Ï≤´ ÌôúÎèô Í∏∞Î°ùÌïòÍ∏∞</Button>
              </Link>
              <Link href="/mypage">
                <Button variant="outline" className="w-full border-blue-300 hover:bg-blue-100 text-blue-700">ÎÇ¥ Ï†ïÎ≥¥ ÌôïÏù∏ÌïòÍ∏∞</Button>
              </Link>
            </div>
          </CardContent>
        </Card>
      )}
      
      {/* Charts Section */}
      <div className="grid gap-6 md:grid-cols-1 lg:grid-cols-2 mb-8">
        <Card className="shadow-md">
          <CardHeader>
            <CardTitle>ÏàòÎ©¥ ÏãúÍ∞Ñ Ï∞®Ìä∏</CardTitle>
            <CardDescription>ÏßÄÎÇú Ï£º ÎåÄÎπÑ ÌèâÍ∑† ÏàòÎ©¥ ÏãúÍ∞Ñ</CardDescription>
          </CardHeader>
          <CardContent className="h-80 flex items-center justify-center">
            {sleep.length > 0 ? (
              <div className="w-full h-full flex flex-col justify-center items-center">
                <div className="text-center mb-4">
                  <div className="text-4xl font-bold text-primary">
                    {sleepStats.averageSleepHours.toFixed(1)} ÏãúÍ∞Ñ
                  </div>
                  <div className="text-sm text-muted-foreground">ÌèâÍ∑† ÏàòÎ©¥ ÏãúÍ∞Ñ</div>
                </div>
                
                <div className="flex items-center justify-center gap-6 mt-4">
                  <div className="text-center">
                    <div className="text-lg font-semibold">ÏßÄÎÇúÏ£º</div>
                    <div className="text-2xl">{sleepStats.lastWeekAverage.toFixed(1)} ÏãúÍ∞Ñ</div>
                  </div>
                  
                  <div className="flex items-center gap-1">
                    {sleepStats.percentChange > 0 ? (
                      <>
                        <TrendingUp className="h-6 w-6 text-green-500" />
                        <span className="text-green-500 font-medium">+{sleepStats.percentChange.toFixed(1)}%</span>
                      </>
                    ) : sleepStats.percentChange < 0 ? (
                      <>
                        <TrendingDown className="h-6 w-6 text-red-500" />
                        <span className="text-red-500 font-medium">{sleepStats.percentChange.toFixed(1)}%</span>
                      </>
                    ) : (
                      <>
                        <Minus className="h-6 w-6 text-gray-500" />
                        <span className="text-gray-500 font-medium">Î≥ÄÌôî ÏóÜÏùå</span>
                      </>
                    )}
                  </div>
                </div>
                
                <div className="mt-8 w-full h-32">
                  <div className="relative w-full h-full">
                    <div className="absolute inset-0 bg-gradient-to-r from-blue-100 to-indigo-100 rounded-lg"></div>
                    <div className="absolute inset-0 flex items-center justify-center">
                      <BedDouble className="h-16 w-16 text-blue-500 opacity-30" />
                    </div>
                  </div>
                </div>
              </div>
            ) : (
              <p className="text-muted-foreground">Îç∞Ïù¥ÌÑ∞Í∞Ä Ï∂©Î∂ÑÌïòÏßÄ ÏïäÏäµÎãàÎã§.</p>
            )}
          </CardContent>
        </Card>
        
        <Card className="shadow-md">
          <CardHeader>
            <CardTitle>ÌôúÎèô ÎÇ¥Ïó≠</CardTitle>
            <CardDescription>Ï∞∏Ïó¨Ìïú ÌôúÎèô Ïú†Ìòï Î∂ÑÏÑù</CardDescription>
          </CardHeader>
          <CardContent className="h-80 flex items-center justify-center">
            {topActivities.length > 0 ? (
              <div className="w-full h-full">
                <ResponsiveContainer width="100%" height="100%">
                  <PieChart>
                    <Pie
                      data={topActivities}
                      cx="50%"
                      cy="50%"
                      innerRadius={60}
                      outerRadius={90}
                      paddingAngle={5}
                      dataKey="value"
                      label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}
                    >
                      {topActivities.map((entry, index) => (
                        <Cell key={`cell-${index}`} fill={ACTIVITY_COLORS[index % ACTIVITY_COLORS.length]} />
                      ))}
                    </Pie>
                    <Tooltip formatter={(value) => [`${value}Ìöå`, 'ÎπàÎèÑ']} />
                    <Legend />
                  </PieChart>
                </ResponsiveContainer>
              </div>
            ) : (
              <p className="text-muted-foreground">Îç∞Ïù¥ÌÑ∞Í∞Ä Ï∂©Î∂ÑÌïòÏßÄ ÏïäÏäµÎãàÎã§.</p>
            )}
          </CardContent>
        </Card>
      </div>
      
      <div className="grid gap-6 md:grid-cols-1 lg:grid-cols-2 mb-8">
        <Card className="shadow-md">
          <CardHeader>
            <CardTitle>Í∞êÏ†ï ÎπàÎèÑ</CardTitle>
            <CardDescription>Í∞ÄÏû• ÎßéÏù¥ ÌëúÌòÑÎêú Í∞êÏ†ï TOP 5</CardDescription>
          </CardHeader>
          <CardContent className="h-80 flex items-center justify-center">
            {topEmotions.length > 0 ? (
              <div className="w-full h-full">
                <ResponsiveContainer width="100%" height="100%">
                  <BarChart
                    data={topEmotions}
                    layout="vertical"
                    margin={{ top: 5, right: 30, left: 40, bottom: 5 }}
                  >
                    <XAxis type="number" />
                    <YAxis 
                      type="category" 
                      dataKey="name" 
                      tick={(props) => {
                        const { x, y, payload } = props;
                        const emotion = topEmotions.find(e => e.name === payload.value);
                        return (
                          <g transform={`translate(${x},${y})`}>
                            <text x={-30} y={4} textAnchor="end" fill="#666">
                              {emotion?.emoji} {payload.value}
                            </text>
                          </g>
                        );
                      }}
                    />
                    <Tooltip 
                      formatter={(value) => [`${value}Ìöå`, 'ÎπàÎèÑ']}
                    />
                    <Bar dataKey="value" radius={[0, 6, 6, 0]}>
                      {topEmotions.map((entry, index) => (
                        <Cell key={`cell-${index}`} fill={EMOTION_COLORS[index % EMOTION_COLORS.length]} />
                      ))}
                    </Bar>
                  </BarChart>
                </ResponsiveContainer>
              </div>
            ) : (
              <p className="text-muted-foreground">Îç∞Ïù¥ÌÑ∞Í∞Ä Ï∂©Î∂ÑÌïòÏßÄ ÏïäÏäµÎãàÎã§.</p>
            )}
          </CardContent>
        </Card>
        
        <Card className="shadow-md">
          <CardHeader>
            <CardTitle>ÎåÄÌôî ÌååÌä∏ÎÑà</CardTitle>
            <CardDescription>Í∞ÄÏû• ÎßéÏù¥ ÎåÄÌôîÌïú ÏÉÅÎåÄ TOP 3</CardDescription>
          </CardHeader>
          <CardContent className="h-80 flex items-center justify-center">
            {topPartners.length > 0 ? (
              <div className="w-full h-full">
                <ResponsiveContainer width="100%" height="100%">
                  <BarChart
                    data={topPartners}
                    margin={{ top: 20, right: 30, left: 20, bottom: 5 }}
                  >
                    <XAxis dataKey="name" />
                    <YAxis />
                    <Tooltip formatter={(value) => [`${value}Ìöå`, 'ÎπàÎèÑ']} />
                    <Bar dataKey="value" radius={[6, 6, 0, 0]}>
                      {topPartners.map((entry, index) => (
                        <Cell key={`cell-${index}`} fill={PARTNER_COLORS[index % PARTNER_COLORS.length]} />
                      ))}
                    </Bar>
                  </BarChart>
                </ResponsiveContainer>
              </div>
            ) : (
              <p className="text-muted-foreground">Îç∞Ïù¥ÌÑ∞Í∞Ä Ï∂©Î∂ÑÌïòÏßÄ ÏïäÏäµÎãàÎã§.</p>
            )}
          </CardContent>
        </Card>
      </div>

      {/* Today's Summary Section */}
      <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3 mb-8">
        <Card className="shadow-md hover:shadow-lg transition-shadow">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Ïò§ÎäòÏùò ÏàòÎ©¥</CardTitle>
            <BedDouble className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{summary.todaySleepHours.toFixed(1)} ÏãúÍ∞Ñ</div>
            <p className="text-xs text-muted-foreground">Ïò§Îäò Í∏∞Î°ùÎêú ÏàòÎ©¥ ÏãúÍ∞ÑÏûÖÎãàÎã§.</p>
          </CardContent>
        </Card>
        <Card className="shadow-md hover:shadow-lg transition-shadow">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Ïò§Îäò Î®πÏùÄ ÏãùÏÇ¨</CardTitle>
            <Utensils className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{summary.todayMealsLogged}</div>
            <p className="text-xs text-muted-foreground">Ïò§Îäò Í∏∞Î°ùÎêú ÏãùÏÇ¨ ÌöüÏàòÏûÖÎãàÎã§.</p>
          </CardContent>
        </Card>
        <Card className="shadow-md hover:shadow-lg transition-shadow">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Ïò§ÎäòÏùò ÌôúÎèô</CardTitle>
            <ListPlus className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{summary.todayActivitiesLogged}</div>
            <p className="text-xs text-muted-foreground">Ïò§Îäò Í∏∞Î°ùÎêú ÌôúÎèô ÏàòÏûÖÎãàÎã§.</p>
          </CardContent>
        </Card>
      </div>
    </div>
  );
} 